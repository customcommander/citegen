const R = require('ramda');
const tap = require('tap');
const l10nText = require('./csl-l10n-text'); // SUT

const find = l10nText(R.__, [
  {terms: [
    {name: 'ğŸŒ¯', single: 'ğŸŒ¯'},
    {name: 'ğŸŒ¯', form: 'short', single: 'ğŸŒ®'}]},
  {terms: [
    {name: 'ğŸŒ¯', single: 'ğŸ”¥', multiple: 'ğŸŒ¯ğŸŒ¯ğŸŒ¯'},
    {name: 'ğŸŒ¯', form: 'short', single: 'ğŸ”¥', multiple: 'ğŸŒ®ğŸŒ®ğŸŒ®'}]},
  {terms: [
    {name: 'ğŸŒ¶', single: 'ğŸŒ¶'},
    {name: 'ğŸŒ¶', form: 'verb', single: 'ğŸ˜±'}]}]);

tap.equal(find({term: 'ğŸŒ¯'}), 'ğŸŒ¯');
tap.equal(find({term: 'ğŸŒ¯', plural: 'true'}), 'ğŸŒ¯ğŸŒ¯ğŸŒ¯');
tap.equal(find({term: 'ğŸŒ¯', form: 'short'}), 'ğŸŒ®');
tap.equal(find({term: 'ğŸŒ¯', form: 'short', plural: 'true'}), 'ğŸŒ®ğŸŒ®ğŸŒ®');
tap.equal(find({term: 'ğŸŒ¶'}), 'ğŸŒ¶');
tap.equal(find({term: 'ğŸ¥‘'}), '');
tap.equal(find({term: 'ğŸŒ¯', form: 'symbol'}), 'ğŸŒ®');
tap.equal(find({term: 'ğŸŒ¯', form: 'verb'}), 'ğŸŒ¯');
tap.equal(find({term: 'ğŸŒ¯', form: 'symbol', plural: 'true'}), 'ğŸŒ®ğŸŒ®ğŸŒ®');
tap.equal(find({term: 'ğŸŒ¶', form: 'short'}), 'ğŸŒ¶');
tap.equal(find({term: 'ğŸŒ¶', form: 'verb-short'}), 'ğŸ˜±');